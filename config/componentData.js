module.exports = /* eslint-disable */ [{"name":"A5Hello","description":"Display an Hello - Very usefull!","props":{"message":{"type":{"name":"string"},"required":true,"description":"Message to display","defaultValue":{"value":"'A5Sys'","computed":false}}},"code":"import React, {PropTypes} from 'react'\r\n\r\n/**\r\n * Display an Hello - Very usefull!\r\n */\r\nconst A5Hello = ({ message }) => { \r\n\r\n  return (\r\n    <div className='a5-hello'>\r\n         <h3>Hello {message}</h3>\r\n    </div>\r\n  )\r\n}\r\n\r\nA5Hello.propTypes = {\r\n  /**\r\n   * Message to display\r\n   */\r\n    message: PropTypes.string.isRequired\r\n}\r\n\r\nA5Hello.defaultProps = { \r\n  message: 'A5Sys'\r\n}\r\nexport default A5Hello\r\n","examples":[{"name":"Example1","description":"","code":"import React from 'react'\r\nimport A5Hello from 'ps-react/A5Hello'\r\n\r\nexport default function Example1 () {\r\n    return <A5Hello message=\"Test\"/>\r\n}\r\n"}]},{"name":"EyeIcon","description":"SVG Eye Icon","code":"import React from 'react'\r\n\r\n/** SVG Eye Icon */\r\nfunction EyeIcon() {\r\n  // Attribution: Fabi√°n Alexis at https://commons.wikimedia.org/wiki/File:Antu_view-preview.svg\r\n  return (\r\n    <svg width=\"16\" height=\"16\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 22 22\">\r\n      <g transform=\"matrix(.02146 0 0 .02146 1 1)\" fill=\"#4d4d4d\">\r\n        <path d=\"m466.07 161.53c-205.6 0-382.8 121.2-464.2 296.1-2.5 5.3-2.5 11.5 0 16.9 81.4 174.9 258.6 296.1 464.2 296.1 205.6 0 382.8-121.2 464.2-296.1 2.5-5.3 2.5-11.5 0-16.9-81.4-174.9-258.6-296.1-464.2-296.1m0 514.7c-116.1 0-210.1-94.1-210.1-210.1 0-116.1 94.1-210.1 210.1-210.1 116.1 0 210.1 94.1 210.1 210.1 0 116-94.1 210.1-210.1 210.1\" />\r\n        <circle cx=\"466.08\" cy=\"466.02\" r=\"134.5\" />\r\n      </g>\r\n    </svg>\r\n  )\r\n}\r\n\r\nexport default EyeIcon\r\n","examples":[{"name":"Example","description":"EyeIcon icon","code":"import React from 'react'\r\nimport EyeIcon from 'ps-react/EyeIcon'\r\n\r\n/**\r\n* EyeIcon icon\r\n*/\r\nexport default function Example () {\r\n    return <EyeIcon />\r\n}"}]},{"name":"Label","description":"Display a label with the standard markup of the company","props":{"label":{"type":{"name":"string"},"required":false,"description":"Label Text"},"required":{"type":{"name":"bool"},"required":false,"description":"Display asterisk after the label if true"},"htmlFor":{"type":{"name":"string"},"required":true,"description":"HTML ID for associated input"}},"code":"import React from 'react'\r\nimport PropTypes from 'prop-types'\r\n\r\n/**\r\n * Display a label with the standard markup of the company \r\n */\r\nfunction Label ({htmlFor, label, required})  {\r\n    return (\r\n        <label>\r\n            {label} {required && <span style={{color: 'red'}}>*</span> }\r\n        </label>\r\n        )\r\n}\r\n    \r\nLabel.propTypes = {\r\n\r\n    /**\r\n     * Label Text\r\n     */\r\n    label: PropTypes.string.required,\r\n    \r\n    /**\r\n     * Display asterisk after the label if true\r\n     */\r\n    required: PropTypes.bool,\r\n\r\n    /**\r\n     * HTML ID for associated input\r\n     */\r\n    htmlFor: PropTypes.string.isRequired\r\n}            \r\n\r\nexport default Label\r\n    ","examples":[{"name":"Example","description":"Label for required field","code":"import React from 'react'\r\nimport Label from 'ps-react/Label'\r\n\r\n/**\r\n* Label for required field \r\n*/\r\nexport default function Example () {\r\n    return <Label htmlFor=\"test\" label=\"test\" required />\r\n}"}]},{"name":"PasswordInput","description":"Password input with integrated label, quality tips, and show password toggle.","props":{"htmlId":{"type":{"name":"string"},"required":true,"description":"Unique HTML ID. Used for tying label to HTML input. Handy hook for automated testing."},"name":{"type":{"name":"string"},"required":true,"description":"Input name. Recommend setting this to match object's property so a single change handler can be used by convention."},"value":{"type":{"name":"any"},"required":false,"description":"Password value"},"label":{"type":{"name":"string"},"required":false,"description":"Input label","defaultValue":{"value":"'Password'","computed":false}},"onChange":{"type":{"name":"func"},"required":true,"description":"Function called when password input value changes"},"maxLength":{"type":{"name":"number"},"required":false,"description":"Max password length accepted","defaultValue":{"value":"50","computed":false}},"placeholder":{"type":{"name":"string"},"required":false,"description":"Placeholder displayed when no password is entered"},"showVisibilityToggle":{"type":{"name":"bool"},"required":false,"description":"Set to true to show the toggle for displaying the currently entered password","defaultValue":{"value":"false","computed":false}},"quality":{"type":{"name":"number"},"required":false,"description":"Display password quality visually via ProgressBar, accepts a number between 0 and 100"},"error":{"type":{"name":"string"},"required":false,"description":"Validation error to display"}},"code":"import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport ProgressBar from '../ProgressBar';\r\nimport EyeIcon from '../EyeIcon';\r\nimport TextInput from '../TextInput';\r\n\r\n/** Password input with integrated label, quality tips, and show password toggle. */\r\nclass PasswordInput extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      showPassword: false\r\n    }\r\n  }\r\n\r\n  toggleShowPassword = event => {\r\n    this.setState(prevState => {\r\n      return { showPassword: !prevState.showPassword };\r\n    });\r\n    if (event) event.preventDefault();\r\n  }\r\n\r\n  render() {\r\n    const { htmlId, value, label, error, onChange, placeholder, maxLength, showVisibilityToggle, quality, ...props } = this.props;\r\n    const { showPassword } = this.state;\r\n\r\n    return (\r\n      <TextInput\r\n        htmlId={htmlId}\r\n        label={label}\r\n        placeholder={placeholder}\r\n        type={showPassword ? 'text' : 'password'}\r\n        onChange={onChange}\r\n        value={value}\r\n        maxLength={maxLength}\r\n        error={error}\r\n        required\r\n        {...props}>\r\n        {\r\n          showVisibilityToggle &&\r\n          <a\r\n            href=\"\"\r\n            onClick={this.toggleShowPassword}\r\n            style={{ marginLeft: 5 }}>\r\n            <EyeIcon />\r\n          </a>\r\n        }\r\n        {\r\n          value.length > 0 && quality && <ProgressBar percent={quality} width={130} />\r\n        }\r\n      </TextInput>\r\n    );\r\n  }\r\n}\r\n\r\nPasswordInput.propTypes = {\r\n  /** Unique HTML ID. Used for tying label to HTML input. Handy hook for automated testing. */\r\n  htmlId: PropTypes.string.isRequired,\r\n\r\n  /** Input name. Recommend setting this to match object's property so a single change handler can be used by convention.*/\r\n  name: PropTypes.string.isRequired,\r\n\r\n  /** Password value */\r\n  value: PropTypes.any,\r\n\r\n  /** Input label */\r\n  label: PropTypes.string,\r\n\r\n  /** Function called when password input value changes */\r\n  onChange: PropTypes.func.isRequired,\r\n\r\n  /** Max password length accepted */\r\n  maxLength: PropTypes.number,\r\n\r\n  /** Placeholder displayed when no password is entered */\r\n  placeholder: PropTypes.string,\r\n\r\n  /** Set to true to show the toggle for displaying the currently entered password */\r\n  showVisibilityToggle: PropTypes.bool,\r\n\r\n  /** Display password quality visually via ProgressBar, accepts a number between 0 and 100 */\r\n  quality: PropTypes.number,\r\n\r\n  /** Validation error to display */\r\n  error: PropTypes.string\r\n};\r\n\r\nPasswordInput.defaultProps = {\r\n  maxLength: 50,\r\n  showVisibilityToggle: false,\r\n  label: 'Password'\r\n};\r\n\r\nexport default PasswordInput;","examples":[]},{"name":"ProgressBar","description":"","props":{"percent":{"type":{"name":"number"},"required":true,"description":"Percent of the progress"},"width":{"type":{"name":"number"},"required":true,"description":"Bar width"},"height":{"type":{"name":"number"},"required":false,"description":"Bar height","defaultValue":{"value":"5","computed":false}}},"code":"import React from 'react'\r\nimport PropTypes from 'prop-types'\r\nclass ProgressBar extends React.Component {\r\n    getColor = (percent) => {\r\n        if (this.props.percent === 100) return 'green'\r\n        return this.props.percent > 50 ? 'lightgreen' : 'red'\r\n    }\r\n\r\n    getWidthAsPercentOfTotalWidth = () => {\r\n        return parseInt(this.props.width * (this.props.percent / 100), 10)\r\n    }\r\n\r\n    render () {\r\n        const {percent, width, height} = this.props\r\n        return(\r\n            <div style={{border: 'solid 1px lightgray', width}}>\r\n                <div style={{\r\n                    width: this.getWidthAsPercentOfTotalWidth(),\r\n                    height,\r\n                    backgroundColor: this.getColor(percent)\r\n                }}></div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nProgressBar.propTypes = {\r\n    /**\r\n     * Percent of the progress  \r\n     */\r\n    percent: PropTypes.number.isRequired,\r\n\r\n    /**\r\n     * Bar width \r\n     */\r\n    width: PropTypes.number.isRequired,\r\n\r\n    /**\r\n     * Bar height\r\n     */\r\n    height: PropTypes.number\r\n}\r\n\r\nProgressBar.defaultProps = {\r\n    height: 5\r\n}\r\n\r\nexport default ProgressBar\r\n","examples":[{"name":"Example100percent","description":"100% progress & height set at 40px","code":"import React from 'react'\r\nimport ProgressBar from 'ps-react/ProgressBar'\r\n\r\n/**\r\n* 100% progress & height set at 40px\r\n*/\r\nexport default function Example () {\r\n    return <ProgressBar percent={100} width={250} height={40}/>\r\n}"},{"name":"Example10Percent","description":"10% progress","code":"import React from 'react'\r\nimport ProgressBar from 'ps-react/ProgressBar'\r\n\r\n/**\r\n * 10% progress\r\n */\r\nexport default function Example () {\r\n    return <ProgressBar percent={10} width={250} />\r\n}\r\n"},{"name":"Example70percent","description":"70% progress","code":"import React from 'react'\r\nimport ProgressBar from 'ps-react/ProgressBar'\r\n\r\n/**\r\n* 70% progress\r\n*/\r\nexport default function Example () {\r\n    return <ProgressBar percent={70} width={250}/>\r\n}"}]},{"name":"TextInput","description":"Text input with integrated label to enforce consistency in layout, error display, label placement, and required field marker.","props":{"htmlId":{"type":{"name":"string"},"required":true,"description":"Unique HTML ID. Used for tying label to HTML input. Handy hook for automated testing."},"name":{"type":{"name":"string"},"required":true,"description":"Input name. Recommend setting this to match object's property so a single change handler can be used."},"label":{"type":{"name":"string"},"required":true,"description":"Input label"},"type":{"type":{"name":"enum","value":[{"value":"'text'","computed":false},{"value":"'number'","computed":false},{"value":"'password'","computed":false}]},"required":false,"description":"Input type","defaultValue":{"value":"\"text\"","computed":false}},"required":{"type":{"name":"bool"},"required":false,"description":"Mark label with asterisk if set to true","defaultValue":{"value":"false","computed":false}},"onChange":{"type":{"name":"func"},"required":true,"description":"Function to call onChange"},"placeholder":{"type":{"name":"string"},"required":false,"description":"Placeholder to display when empty"},"value":{"type":{"name":"any"},"required":false,"description":"Value"},"error":{"type":{"name":"string"},"required":false,"description":"String to display when error occurs"},"children":{"type":{"name":"node"},"required":false,"description":"Child component to display next to the input"}},"code":"import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport Label from '../Label';\r\n\r\n/** Text input with integrated label to enforce consistency in layout, error display, label placement, and required field marker. */\r\nfunction TextInput({htmlId, name, label, type = \"text\", required = false, onChange, placeholder, value, error, children, ...props}) {\r\n  return ( \r\n    <div style={{marginBottom: 16}}>\r\n      <Label htmlFor={htmlId} label={label} required={required} />\r\n      <input\r\n        id={htmlId}\r\n        type={type}\r\n        name={name}\r\n        placeholder={placeholder}\r\n        value={value}\r\n        onChange={onChange}\r\n        style={error && {border: 'solid 1px red'}}\r\n        {...props}/>\r\n        {children}\r\n      {error && <div className=\"error\" style={{color: 'red'}}>{error}</div>}\r\n    </div>\r\n  );\r\n};\r\n\r\nTextInput.propTypes = {\r\n  /** Unique HTML ID. Used for tying label to HTML input. Handy hook for automated testing. */\r\n  htmlId: PropTypes.string.isRequired,\r\n\r\n  /** Input name. Recommend setting this to match object's property so a single change handler can be used. */\r\n  name: PropTypes.string.isRequired,\r\n\r\n  /** Input label */\r\n  label: PropTypes.string.isRequired,\r\n\r\n  /** Input type */\r\n  type: PropTypes.oneOf(['text', 'number', 'password']),\r\n\r\n  /** Mark label with asterisk if set to true */\r\n  required: PropTypes.bool,\r\n\r\n  /** Function to call onChange */\r\n  onChange: PropTypes.func.isRequired,\r\n\r\n  /** Placeholder to display when empty */\r\n  placeholder: PropTypes.string,\r\n\r\n  /** Value */\r\n  value: PropTypes.any,\r\n\r\n  /** String to display when error occurs */\r\n  error: PropTypes.string,\r\n\r\n  /** Child component to display next to the input */\r\n  children: PropTypes.node\r\n};\r\n\r\nexport default TextInput;","examples":[{"name":"ExampleError","description":"Required TextBox with error","code":"import React from 'react';\r\nimport TextInput from 'ps-react/TextInput';\r\n\r\n/** Required TextBox with error */\r\nexport default class ExampleError extends React.Component {\r\n  render() {\r\n    return (\r\n      <TextInput\r\n        htmlId=\"example-optional\"\r\n        label=\"First Name\"\r\n        name=\"firstname\"\r\n        onChange={() => {}}\r\n        required\r\n        error=\"First name is required.\"\r\n       />\r\n    )\r\n  }\r\n}"},{"name":"ExampleOptional","description":"Optional TextBox","code":"import React from 'react';\r\nimport TextInput from 'ps-react/TextInput';\r\n\r\n/** Optional TextBox */\r\nexport default class ExampleOptional extends React.Component {\r\n  render() {\r\n    return (\r\n      <TextInput\r\n        htmlId=\"example-optional\"\r\n        label=\"First Name\"\r\n        name=\"firstname\"\r\n        onChange={() => {}}\r\n       />\r\n    )\r\n  }\r\n}"}]}]